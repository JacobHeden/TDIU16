#include "threads/malloc.h"
#include "filesys/filesys.h"
#include "flist.h"

//Initierar mapen används i threads/thread.c
void map_init(struct map* m)
{
  unsigned i = 0;
  for(; i < MAP_SIZE; ++i)
    m->content[i] = NULL; //Nollställer
}
//Söker i mapen med hjälp av nyckeln
value_t map_find(struct map* m, key_t k)
{
  if( k < MAP_SIZE)
    return m->content[k]; //Är det tomot på den postionen retuneras NULL från att init initerat mapen. 
  else
    return NULL;
}

//Insert
key_t map_insert(struct map* m, value_t v)
{

  unsigned i = 2; //Större än 1 
  while(m->content[i] != NULL && i < MAP_SIZE) //Hitta första tomma platsen
    ++i; 
  if(i == MAP_SIZE)
    return MAP_SIZE;
  m->content[i] = v;
  return i;
}

value_t map_remove(struct map* m, key_t k)
{
  if(m->content[k] != NULL)
    {
    m->content[k] = NULL; // Tar bort nyckeln. 
    filesys_close(m->content[k]);
    }
 return NULL;
}

void map_for_each(struct map* m,
		  void (*exec)(key_t k, value_t v, int aux),
		  int aux)
{
  unsigned i = 2;
  for(; i < MAP_SIZE; ++i)
    {
      if(m->content[i] != NULL)
	exec(i, m->content[i], aux); 
    }
}

void map_remove_if(struct map* m,
		   bool (*cond)(value_t v),
		   int aux)
{
  unsigned i = 2;
  for(; i < MAP_SIZE; ++i)
    {
      if(cond(m->content[i]))
	map_remove(m, i);
    }
}

bool clear_map( value_t v)
{
  if(v != NULL)
    return true;
  else
    return false;
}
